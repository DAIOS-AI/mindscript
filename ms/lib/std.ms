################################################################################
# MindScript Standard library
# (c) 2024 DAIOS Technologies Ltd.
################################################################################

# Collects the elements generated by an iterator into an array.
let list = fun(iterator: Any -> Any) -> [Any] do
    let array = []
    for e in iterator do
        push(array, e)
    end
    return(array)
end

# Iterator tools.

# Applies a function to an iterator.
let map = fun(f: Any -> Any, iterator: Null -> Any) -> (Null -> Any) do
    fun() -> Any do
        let value = iterator()
        if value == null do null 
        else f(value)
        end        
    end
end

# Filters an iterator using a condition.
let filter = fun(cond: Any -> Bool, iterator: Null -> Any) -> (Null -> Any) do
    fun() -> Any do
        for value in iterator do
            if cond(value) do
                break(value)
            end
        end
    end
end

# Reduces an iterator using a binary function.
#
# Example: calculate the sum from 1 to 100.
# let sum = fun(n, m) do n+m end
# reduce(sum, range(1, 101))
let reduce = fun(f: Any -> Any -> Any, iterator: Null -> Any) -> Any do
    let accum = iterator()
    if accum == null do [] end
    for value in iterator do
        accum = f(accum, value)
    end
end

# Returns an iterator for the integers from a given starting number until an ending number.
let range = fun(start: Int, stop: Int?) -> (Null -> Int?) do
    fun(_: Null) -> Int? do
        let n = start
        if stop == null or start < stop do
            start = start + 1
            return(n)
        else
            return(null)
        end
    end
end

# The natural numbers.
let natural = fun(_: Null) -> (Null -> Int?) do
    range(1, null)
end

# The positive integers.
let natural0 = fun(_: Null) -> (Null -> Int?) do
    range(0, null)
end

# Retrieve a web page.
let www = fun(url: Str) -> Str? do
    let page = http(null, "GET", url)
    if not exists(page, "error") do
        return(page.text)
    else
        return(null)
    end
end

# Import a remote module.
let netImport = fun(url: Str) -> {} do
    let code = www(url)
    if code != null do
        return(codeImport(code, url))
    else
        return(null)
    end
end

# Returns a list of keys for a given object.
let dir = fun(obj: {}) -> [Str] do
    list(keys(obj))
end

# Return null given any input.
let mute = fun(_: Any) -> Null do null end

# Return the methods of an object.
let dirFun = fun(obj: {}) -> [Str] do
    let m = []
    for key in keys(obj) do
        if isType(get(obj, key), type Any -> Any) do
            push(m, key)
        end
    end
    return(m)
end
